# -*- coding: utf-8 -*-
"""NLP Submission.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mkW0kaFZ_BD-aynEAxrJqgIhWcehfbqJ

IMPORT CSV FILE
"""

from sklearn.model_selection import  train_test_split
import tensorflow as tf
import matplotlib.pyplot as plt
import pandas as pd
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

df = pd.read_csv('bbc.csv')
df

category = pd.get_dummies(df.category)
df_new = pd.concat([df, category], axis = 1)
df_new = df_new.drop(columns = 'category')
df_new

news = df_new['text'].values
label = df_new[['tech','business', 'sport', 'politics', 'entertainment']].values

news_train, news_test, label_train, label_test = train_test_split(news, label, test_size = 0.2)

tokenizer = Tokenizer(num_words = 5000, oov_token = 'x')
tokenizer.fit_on_texts(news_train)
tokenizer.fit_on_texts(news_test)

sequence_train = tokenizer.texts_to_sequences(news_train)
sequence_test = tokenizer.texts_to_sequences(news_test)

pad_train = pad_sequences(sequence_train)
pad_test = pad_sequences(sequence_test)

model = tf.keras.Sequential([
                             tf.keras.layers.Embedding(input_dim=5000, output_dim=16),
                             tf.keras.layers.LSTM(64),
                             tf.keras.layers.Dense(128, activation = 'relu'),
                             tf.keras.layers.Dropout(0.5),
                             tf.keras.layers.Dense(5, activation = 'softmax')])

model.compile(loss = 'categorical_crossentropy', optimizer = 'nadam', metrics = ['accuracy'])

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.9 and logs.get('val_accuracy')>0.9):
      print("\nAccuration both in training set and validation set has reach more than 90%.")
      self.model.stop_training = True
callbacks = myCallback()

num_epoch = 50
history = model.fit(
    pad_train, label_train, epochs = num_epoch,
    validation_data = (pad_test, label_test),
    verbose = 2, callbacks = [callbacks])

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Accuracy Model')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc = 'lower right')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()